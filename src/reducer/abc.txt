

const productReducer = (state, action) => {


  // if (action.type === "SET_LOADING") {
  //   return {
  //     ...state,
  //     isLoading: true,
  //   }
  // }


  // if (action.type === "API_ERROR") {
  //   return {
  //     ...state,
  //     isLoading: false,
  //     isError:true,
  //   }
  // }
  //using switch
//   switch (action.type) {
//     case "SET_LOADING":
//       return {
//        ...state,
//        isLoading: true,
//       }


//     case "SET_API_DATA":
//       const featureData = action.payload.filter((curElem) => {
//         return curElem.featured === true;
//       })
//       return {
//         ...state,
//         isLoading: false,
//         products:action.payload,
//         featureProducts:featureData ,
//       }


//     case "API_ERROR":
//       return {
//       ...state,
//       isLoading: false,
//       isError:true,
//     }

//     default:
//       return state;
// }


}

export default productReducer

import React, { createContext, useContext, useEffect, useReducer } from "react";
import axios from "axios";
import reducer from "../reducer/productReducer"

const AppContext = createContext();

const API = "https://api.pujakaitem.com/api/products";

const initialState = {
  isloading: false,
  isError: false,
  products: [],
  featureProducts: [],
}

const AppProvider = ({ children }) => {

  const [state, dispatch] = useReducer(reducer, initialState);
  dispatch({ type: "SET_LOADING"})

  const getProducts = async (url) => {
    try {
      const res = await axios.get(url);
      const products = await res.data;
      dispatch({ type: "SET_API_DATA", payload: products })
    } catch (error) {
      dispatch({ type: "API_ERROR"})

    }

  };

  useEffect(() => {
    getProducts(API);
  }, []);

  return (
    <AppContext.Provider value={{ ...state }}>
      {children}
    </AppContext.Provider>
  );
};

const UseProductContext = () => {
  return useContext(AppContext);
};

export { AppProvider, AppContext, UseProductContext };
